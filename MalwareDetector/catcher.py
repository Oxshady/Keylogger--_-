#!/usr/bin/python3
from pathlib import Path
from shutil import unpack_archive
from rarfile import RarFile
import hashlib
class MalwareDetection:
    def __init__(self) -> None:
        self.hash_objects = {
            'md5': hashlib.md5(),
            'sha1': hashlib.sha1(),
            'sha224': hashlib.sha224(),
            'sha256': hashlib.sha256(),
            'sha3384': hashlib.sha3_384(),
            'sha3512': hashlib.sha3_512()
        }
        self.all_files_hashes = dict()
        self.shutill_supp = [".zip", ".gz", ".tar", ".bz2", ".xz"]
        self.malicious_hashes = ["334496c9f0dbca476c1a292c11939834806d72e3d002b0a66c52f28a03a5caf9"
                                ,"001e523e1bcb1b8874c1f446f9213a700ec1da8c57d7fb570b5aff4d",
                                "456c583c55f133f98af3beb597e48095ea287703",
                                "1fda4cdee579ae7a07e1b4029a015be0",
                                "f11fa868ac3dee1e5fbd985fe15ba6d34c7ec0abb47babe0d34a35514c49c86a",
                                "8ace3486",
                                "6b2f645881bed988d32c4f7241f3a8dd",
                                "69d55495b7d59d72d32a07755a39197617927248edc3b72fb476f3ff3d05bd33c967928acf05df93897aedd58c75064694e6bc7a9b0a6aa618a5987ffadfed2c",
                                "9fd20defd9b97add19d682d83e1a8ed5f20496c2d03110e15a6f7ba1c2e2999f0195f974fa0de8174edf2f09dce8c9f2"]
        self.main_dir_path = None
        self.main_zipped = input(r"enter the path of malware:").strip(" ")
        self.main_dir = "./" + self.main_zipped[self.main_zipped.rfind("\\") + 1:self.main_zipped.rfind(".")]
    def extracting(self):
        unpack_archive(self.main_zipped,"./")
        self.main_dir_path = Path(self.main_dir)
        for file in self.main_dir_path.iterdir():
            if file.suffix in self.shutill_supp:
                unpack_archive(file, file.parent)
                file.unlink()
            elif file.suffix == ".rar":
                try:
                    with RarFile(file, 'r') as rar:
                        rar.extractall(file.parent)
                        file.unlink()
                except Exception as ex:
                    print(f"error in extracting rar files and err is: {ex}")
    def calc_hash(self):
        for file in self.main_dir_path.iterdir():
            for hash in self.hash_objects.keys():
                with file.open(mode="rb") as f:
                    for line in f:
                        self.hash_objects[hash].update(line)
                self.all_files_hashes[self.hash_objects[hash].hexdigest()] = {"name":file.name, "location":file.resolve(),"Parent":file.parent, "hash algorithm":self.hash_objects[hash].name, "hash_of_file":self.hash_objects[hash].hexdigest()}
    def print_files_data(self):
        for key, value in self.all_files_hashes.items():
            print(f"{key} {value}")
    def check_files(self):
        for key in self.all_files_hashes.keys():
            if key in self.malicious_hashes:
                print(f"this file is malicious file name file data is {self.all_files_hashes[key]}")
            
malw = MalwareDetection()
malw.extracting()
malw.calc_hash()
malw.check_files()
