#!/usr/bin/python3
from pathlib import Path
from shutil import unpack_archive
from rarfile import RarFile
import hashlib
class MalwareDetection:
    def __init__(self) -> None:
        self.hash_objects = {
            'md5': hashlib.md5(),
            'sha1': hashlib.sha1(),
            'sha224': hashlib.sha224(),
            'sha256': hashlib.sha256(),
            'sha3384': hashlib.sha3_384(),
            'sha3512': hashlib.sha3_512()
        }
        self.all_files_hashes = dict()
        self.shutill_supp = [".zip", ".gz", ".tar", ".bz2", ".xz"]
        self.malicious_hashes = list()
        self.main_dir_path = None
        self.main_zipped = input(r"enter the path of malware:").strip(" ")
        self.hashes_db = input(r"enter the path of hashes database").strip(" ")
        self.main_dir = "./" + self.main_zipped[self.main_zipped.rfind("\\") + 1:self.main_zipped.rfind(".")]
    def get_mal_hashes(self):
        with open(self.hashes_db, 'r') as f:
            all_hashes = f.readlines()
            for hash in all_hashes:
                h = hash.lstrip('-').strip(' ')
                if h.find('(Mal)') > 0:
                    h = h.replace('(Mal)','').strip()
                    self.malicious_hashes.append(h)
    def extracting(self):
        unpack_archive(self.main_zipped,"./")
        self.main_dir_path = Path(self.main_dir)
        for file in self.main_dir_path.iterdir():
            if file.suffix in self.shutill_supp:
                unpack_archive(file, file.parent)
                file.unlink()
            elif file.suffix == ".rar":
                try:
                    with RarFile(file, 'r') as rar:
                        rar.extractall(file.parent)
                        file.unlink()
                except Exception as ex:
                    print(f"error in extracting rar files and err is: {ex}")
    def calc_hash(self):
        self.get_mal_hashes()
        for file in self.main_dir_path.iterdir():
            for hash in self.hash_objects.keys():
                with file.open(mode="rb") as f:
                    for line in f:
                        self.hash_objects[hash].update(line)
                self.all_files_hashes[self.hash_objects[hash].hexdigest()] = {"name":file.name, "location":file.resolve(),"Parent":file.parent, "hash algorithm":self.hash_objects[hash].name, "hash_of_file":self.hash_objects[hash].hexdigest()}
    def print_files_data(self):
        for key, value in self.all_files_hashes.items():
            print(f"{key} {value}")
    def check_files(self):
        for key in self.all_files_hashes.keys():
            if key in self.malicious_hashes:
                print(f"this file is malicious file name file data is {self.all_files_hashes[key]}")
                
            
malw = MalwareDetection()
malw.extracting()
malw.calc_hash()
malw.check_files()
